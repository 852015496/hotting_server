<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hetting.hottable.mapper.UserTemperatureMapper">
    <resultMap id="BaseResultMap" type="com.hetting.hottable.entity.UserTemperature">
        <result column="user_id" jdbcType="INTEGER" property="userId" />
        <result column="valve_id" jdbcType="INTEGER" property="valveId" />
        <result column="valve_mid" jdbcType="BIGINT" property="valveMid" />
        <result column="plot_id" jdbcType="INTEGER" property="plotId" />
        <result column="user_name" jdbcType="VARCHAR" property="userName" />
        <result column="heatStation" jdbcType="VARCHAR" property="heatStation" />
        <result column="user_address" jdbcType="VARCHAR" property="userAddress" />
        <result column="plot_address" jdbcType="VARCHAR" property="plotAddress" />
        <result column="user_contactWay" jdbcType="CHAR" property="userContactWay" />
        <result column="indoor_temp" jdbcType="VARCHAR" property="indoorTemp" />
        <result column="valve_indoor_temp" jdbcType="VARCHAR" property="valveIndoorTemp" />
        <result column="valve_room_temp" jdbcType="VARCHAR" property="valveRoomTemp" />
        <result column="valve_defined" jdbcType="VARCHAR" property="valveDefined" />
        <result column="maxTemp" jdbcType="VARCHAR" property="maxTemp" />
        <result column="minTemp" jdbcType="VARCHAR" property="minTemp" />
        <result column="avgTemp" jdbcType="INTEGER" property="avgTemp" />
        <result column="tempName" jdbcType="VARCHAR" property="tempName"/>
        <result column="heating_status" jdbcType="VARCHAR" property="heatingStatus"/>
        <result column="startTime" jdbcType="VARCHAR" property="startTime"/>
        <result column="endTime" jdbcType="VARCHAR" property="endTime"/>
        <result column="Date" jdbcType="VARCHAR" property="Date"/>
        <result column="userNum" jdbcType="INTEGER" property="userNum"/>
        <result column="valve_work_mode" jdbcType="VARCHAR" property="valveWorkMode"/>
        <result column="hot_entrance" jdbcType="VARCHAR" property="hotEntrance"/>
        <result column="hot_exit" jdbcType="VARCHAR" property="hotExit"/>
        <result column="supply" jdbcType="VARCHAR" property="supply"/>
        <result column="recycle" jdbcType="VARCHAR" property="recycle"/>
        <result column="concent_code" jdbcType="VARCHAR" property="concentCode"/>
    </resultMap>

    <select id="indoorTempAvg" parameterType="com.hetting.hottable.entity.UserTemperature" resultMap="BaseResultMap">
        select m.tempName,count(*) as userNum,m.date,m.avgTemp,m.plot_address from
        (select elt(interval(vm.valve_room_temp,0,0.11,18,24,26),'无室温数据','18℃以下','18-24℃','24-26℃','26℃以上') as tempName,
        vm.user_id,DATE_FORMAT(vm.start_time,'%m-%d') as date, avg(vm.valve_room_temp) as avgTemp,pm.plot_address
        from valve_message vm left join user u on vm.user_id = u.user_id left join plot_message pm
        on u.plot_id = pm.plot_id where to_days(start_time) = to_days(now())
        GROUP BY elt(interval(vm.valve_room_temp,0,0.1,18,24,26),'无室温数据','18℃以下','18-24℃','24-26℃','26℃以上')
        having pm.plot_address = #{plotAddress}) m group by tempName
    </select>

    <select id="userTemperatureList" parameterType="com.hetting.hottable.entity.UserTemperature" resultMap="BaseResultMap">
        select c.concent_code,x.plot_address,x.plot_id,x.user_name,x.user_contactWay,x.valve_id,x.valve_work_mode, x.heating_status, x.user_id, x.maxTemp, x.minTemp, x.avgTemp from concent c,
        (select pm.plot_address,d.plot_id,d.user_name,d.user_contactWay,d.valve_id,d.valve_work_mode, d.heating_status, d.user_id, d.maxTemp, d.minTemp, d.avgTemp from plot_message pm,
        (select u.plot_id,u.user_name,u.user_contactWay,p.valve_id,p.valve_work_mode, p.heating_status, p.user_id, p.maxTemp, p.minTemp, p.avgTemp from user u,
        (select v.valve_id, v.valve_work_mode,v.heating_status, vm.user_id, vm.maxTemp, vm.minTemp, vm.avgTemp from valve v,
        (select user_id, max(valve_room_temp) as maxTemp, min(valve_room_temp) as minTemp, avg(valve_room_temp) as avgTemp from
        (select * from `valve_message` where date(start_time) = CURDATE()) todayDate
        GROUP BY user_id) vm
        WHERE v.user_id = vm.user_id) p
        WHERE u.user_id = p.user_id) d
        where d.plot_id = pm.plot_id) x
        where x.plot_id = c.plot_id
        having
        <if test="plotAddress != ''and plotAddress != null ">
            x.plot_address = #{plotAddress}
        </if>
        <if test="userName != '' and userName != null ">
            and user_name = #{userName}
        </if>
    </select>

    <update id="updateByValveWorkMode" parameterType="com.hetting.hottable.entity.ValveMessage">
        update valve_message
        <set>
            <if test="valveWorkMode != null">
                valve_work_mode = #{valveWorkMode,jdbcType=VARCHAR},
            </if>
        </set>
        where valve_mid = #{valveMid,jdbcType=INTEGER}
    </update>

    <select id="eighteenUnderUserMap" parameterType="com.hetting.hottable.entity.UserTemperature" resultMap="BaseResultMap">
       select count(*) as userNum,c.date from
        (select d.avg,d.date,d.plot_address,d.plot_id,d.user_id from
        (select pm.plot_address,m.plot_id,m.user_id,m.avg,date_format(m.avgday,'%m-%d') as date from plot_message pm,
        (select u.plot_id, a.user_id, a.avg, a.avgday from user u,
        (select user_id, avg(valve_room_temp) as avg, date(start_time) avgday from
        (select user_id, start_time, valve_room_temp from `valve_message` where start_time BETWEEN date_sub(curdate(), INTERVAL 7 DAY) and NOW()) 7day
        GROUP BY user_id, date(start_time) having avg &lt;= '18') a
        WHERE u.user_id = a.user_id) m where m.plot_id = pm.plot_id ) d having d.plot_address = #{plotAddress})c group by c.date
    </select>

    <select id="twentyFourUnderUserMap" parameterType="com.hetting.hottable.entity.UserTemperature" resultMap="BaseResultMap">
       select count(*) as userNum,c.date from
        (select d.avg,d.date,d.plot_address,d.plot_id,d.user_id from
        (select pm.plot_address,m.plot_id,m.user_id,m.avg,date_format(m.avgday,'%m-%d') as date from plot_message pm,
        (select u.plot_id, a.user_id, a.avg, a.avgday from user u,
        (select user_id, avg(valve_room_temp) as avg, date(start_time) avgday from
        (select user_id, start_time, valve_room_temp from `valve_message` where start_time BETWEEN date_sub(curdate(), INTERVAL 7 DAY) and NOW()) 7day
        GROUP BY user_id, date(start_time) having avg &gt;= '24') a
        WHERE u.user_id = a.user_id) m where m.plot_id = pm.plot_id ) d having d.plot_address = #{plotAddress})c group by c.date
    </select>

    <select id="toAndForTemp" parameterType="com.hetting.hottable.entity.UserTemperature" resultMap="BaseResultMap">
    select c.date,c.supply  as hot_entrance,c.recycle as hot_exit,c.date,c.plot_address,c.plot_id,c.user_id from
    (select d.supply,d.recycle,d.date,d.plot_address,d.plot_id,d.user_id from
    (select pm.plot_address,m.plot_id,m.user_id,m.supply,m.recycle,date_format(m.avgday,'%m-%d') as date from plot_message pm,
    (select u.plot_id, a.user_id, a.supply,a.recycle,a.avgday from user u,
    (select user_id, avg(hot_entrance) as supply, avg(hot_exit) as recycle, date(start_time) avgday from
    (select user_id, hot_entrance,hot_exit,start_time  from hot_message where start_time BETWEEN date_sub(curdate(), INTERVAL 7 DAY) and NOW()) 7day
    GROUP BY user_id, date(start_time))a
    WHERE u.user_id = a.user_id) m where m.plot_id = pm.plot_id ) d having d.plot_address = #{plotAddress})c	group by c.date
    </select>

    <select id="allUserAvgTemp" parameterType="com.hetting.hottable.entity.UserTemperature" resultMap="BaseResultMap">
      select h.plot_address,h.user_id,h.plot_id,h.date,avg(h.valve_room_temp) as avgTemp from
        (select pm.plot_address,m.user_id,m.plot_id,m.date,m.valve_room_temp from plot_message pm,
        (select u.user_id,u.plot_id,c.date,c.valve_room_temp from user u,
        (select user_id, date_format(start_time,'%m-%d') as date,valve_room_temp from `valve_message`
        where start_time BETWEEN date_sub(curdate(), INTERVAL 7 DAY) and NOW() group by user_id,date) c
        where c.user_id = u.user_id) m )h group by h.date
        having h.plot_address = #{plotAddress}
    </select>

    <select id="indoorTempValveData" parameterType="com.hetting.hottable.entity.UserTemperature" resultMap="BaseResultMap">
        select start_time as date,
        vm.user_id,vm.valve_room_temp as avgTemp,v.valve_defined from user u left join valve_message vm on u.user_id = vm.user_id
         left join valve v on v.valve_id = vm.valve_id
        where to_days(vm.start_time) = to_days(now())
            <if test="userName != '' and userName != null">
               and u.user_name = #{userName}
            </if>
    </select>

    <select id="userTempDayAvg" parameterType="com.hetting.hottable.entity.UserTemperature" resultMap="BaseResultMap">
         select elt(interval(vm.valve_room_temp,0,1,18,24,26),'无室温数据','18℃以下','18-24℃','24-26℃','26℃以上') as tempName,count(*) as userNum,
        vm.user_id,DATE_FORMAT(vm.start_time,'%m-%d') as date, avg(vm.valve_room_temp) as avgTemp,pm.plot_address
        from valve_message vm left join user u on vm.user_id = u.user_id left join plot_message pm
        on u.plot_id = pm.plot_id where TO_DAYS(vm.start_time) = TO_DAYS(NOW())
        GROUP BY elt(interval(vm.valve_room_temp,0,1,18,24,26),'无室温数据','18℃以下','18-24℃','24-26℃','26℃以上')
    </select>

    <!--根据工作模式获取集中器地址-->
    <select id="selectConcentCodeByWorkModal" parameterType="com.hetting.hottable.entity.Valve" resultType="java.lang.String">
        select distinct c.concent_code from valve v left join concent c on v.concent_id = c.concent_id
        <where>
            <if test="valveWorkMode != '' and valveWorkMode != null">
                and v.valve_work_mode = #{valveWorkMode}
            </if>
        </where>
    </select>
    <!-- 供暖效果达标率 -->
    <select id="indoorTemp" resultMap="BaseResultMap">
        select elt(interval(vm.valve_room_temp,0,18,22,40),'0-18℃以下','18-22℃','22-40℃') as tempName,count(*) as userNum,
         avg(vm.valve_room_temp) as avgTemp from valve_message vm left join user u on vm.user_id = u.user_id
         GROUP BY elt(interval(vm.valve_room_temp,0,18,22,40),'0-18℃以下','18-22℃','22-40℃')
    </select>
</mapper>